<!DOCTYPE html>
<html>
<head>
    <title>Crypto Trading Dashboard</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background-color: #131722;
            color: #d1d4dc;
            margin: 0;
            padding: 0;
            line-height: 1.5;
        }
        
        .container {
            width: 100%;
            max-width: 1400px;
            margin: 0 auto;
            padding: 16px;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px 0;
            border-bottom: 1px solid #2a2e39;
            margin-bottom: 16px;
        }
        
        h1 {
            color: #f7f7f7;
            font-size: 20px;
            font-weight: 600;
            margin: 0;
        }
        
        h2 {
            color: #f7f7f7;
            font-size: 16px;
            font-weight: 500;
            margin: 0 0 16px 0;
            opacity: 0.8;
        }
        
        .btn-primary {
            background-color: #2962FF;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            font-size: 14px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }
        
        .btn-primary:hover {
            background-color: #1E53E5;
        }
        
        .market-info {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            margin-bottom: 16px;
        }
        
        .info-pill {
            background-color: #1e222d;
            border: 1px solid #2a2e39;
            border-radius: 4px;
            padding: 6px 12px;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .price-pill {
            font-weight: 600;
        }
        
        .status-pill {
            background-color: #f7931a;
            color: #000;
            border: none;
            font-weight: 500;
        }
        
        .chart-container {
            position: relative;
            margin-bottom: 16px;
            border: 1px solid #2a2e39;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .chart-box {
            height: 380px;
            background-color: #131722;
            position: relative;
            padding: 24px 4px 0 4px;
            width: 100%;
        }
        
        .chart-header {
            position: absolute;
            top: 8px;
            left: 12px;
            z-index: 2;
            font-size: 14px;
            font-weight: 600;
            color: #d1d4dc;
        }
        
        .timeframe-selector {
            position: absolute;
            top: 7px;
            right: 12px;
            z-index: 2;
            display: flex;
            gap: 4px;
        }
        
        .timeframe-btn {
            background-color: #1e222d;
            border: 1px solid #2a2e39;
            color: #787b86;
            font-size: 11px;
            padding: 1px 7px;
            border-radius: 2px;
            cursor: pointer;
            font-family: 'Inter', sans-serif;
        }
        
        .timeframe-btn.active {
            background-color: #2962FF;
            border-color: #2962FF;
            color: white;
        }
        
        .position-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 16px 0;
        }
        
        #position-indicator {
            font-size: 14px;
            font-weight: 600;
            padding: 6px 16px;
            border-radius: 4px;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }
        
        .position-icon {
            font-size: 18px;
        }
        
        .green {
            background-color: rgba(38, 166, 154, 0.2);
            color: #26a69a;
            border: 1px solid #26a69a;
        }
        
        .red {
            background-color: rgba(239, 83, 80, 0.2);
            color: #ef5350;
            border: 1px solid #ef5350;
        }
        
        .neutral {
            background-color: rgba(158, 158, 158, 0.1);
            color: #9e9e9e;
            border: 1px solid #2a2e39;
        }
        
        #status-message {
            font-size: 12px;
            color: #787b86;
            margin-top: 8px;
        }
        
        .data-point {
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .price-change {
            font-size: 14px;
            font-weight: 500;
        }
        
        .price-up {
            color: #26a69a;
        }
        
        .price-down {
            color: #ef5350;
        }
        
        .loading {
            animation: pulse 1.5s infinite;
            opacity: 0.7;
        }
        
        @keyframes pulse {
            0% { opacity: 0.4; }
            50% { opacity: 0.7; }
            100% { opacity: 0.4; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Crypto Trading Dashboard</h1>
            <a href="/history" class="btn-primary">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 8V12L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    <circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="2"/>
                </svg>
                Historical Data
            </a>
        </div>
        
        <div class="market-info">
            <div class="info-pill price-pill" id="btc-price-display">BTC: $79,997.99 <span class="price-change price-up">+$2.00</span></div>
            <div class="info-pill price-pill" id="equity-display">Equity: $448,246.81 <span class="price-change price-up">+$0.00</span></div>
            <div class="info-pill status-pill">LIVE MT5 DATA</div>
        </div>
        
        <h2>Price & Equity Charts</h2>
        
        <!-- BTC Chart -->
        <div class="chart-container">
            <div class="chart-box">
                <div class="chart-header">BTC/USDT</div>
                <div class="timeframe-selector">
                    <button class="timeframe-btn active">1m</button>
                    <button class="timeframe-btn">5m</button>
                    <button class="timeframe-btn">15m</button>
                </div>
                <div id="btc-chart" style="width: 100%; height: 100%;"></div>
            </div>
        </div>
        
        <!-- MT5 Equity Chart -->
        <div class="chart-container">
            <div class="chart-box">
                <div class="chart-header">MT5 Account Equity</div>
                <div class="timeframe-selector">
                    <button class="timeframe-btn active">1m</button>
                    <button class="timeframe-btn">5m</button>
                    <button class="timeframe-btn">15m</button>
                </div>
                <div id="equity-chart" style="width: 100%; height: 100%;"></div>
            </div>
        </div>
        
        <!-- Position indicator -->
        <div class="position-container">
            <div id="position-indicator" class="neutral">No Active Position</div>
            <div id="status-message">Initializing data feeds...</div>
        </div>
    </div>

    <script>
        // Data arrays for storing time series
        let btcData = {
            x: [],
            y: [],
            type: 'scatter',
            mode: 'lines',
            name: 'BTC Price',
            line: { 
                color: '#f7931a',
                width: 2,
                shape: 'spline'
            },
            fill: 'tozeroy',
            fillcolor: 'rgba(247, 147, 26, 0.1)'
        };
        
        // Equity chart data
        let equityData = {
            x: [],
            y: [],
            type: 'scatter',
            mode: 'lines',
            name: 'MT5 Equity',
            line: {
                color: '#2962FF',
                width: 2,
                shape: 'spline'
            },
            fill: 'tozeroy',
            fillcolor: 'rgba(41, 98, 255, 0.1)'
        };
        
        // Keep track of the last known values for simulation when API is down
        let lastBtcPrice = null;
        let lastEquity = null;
        
        // Initialize with historical data to create a more interesting chart
        const current = new Date();
        // Add 60 data points to pre-populate charts with historical-looking data
        for (let i = 0; i < 60; i++) {
            // Start from 60 seconds ago
            const time = new Date(current.getTime() - (60-i) * 1000);
            
            // Generate semi-random historical data for BTC that fluctuates
            const baseBtcPrice = 80000; // Based on the current BTC price
            const btcVariation = Math.sin(i/5) * 500 + Math.random() * 200 - 100;
            const historicalBtcPrice = baseBtcPrice + btcVariation;
            
            // Generate semi-random historical data for equity that fluctuates
            const baseEquity = 450000; // Based on the current equity
            const equityVariation = Math.sin(i/7) * 2000 + Math.random() * 1000 - 500;
            const historicalEquity = baseEquity + equityVariation;
            
            btcData.x.push(time);
            btcData.y.push(historicalBtcPrice);
            equityData.x.push(time);
            equityData.y.push(historicalEquity);
        }
        
        // Initialize the charts
        function initCharts() {
            // BTC Chart
            const btcLayout = {
                paper_bgcolor: '#131722',
                plot_bgcolor: '#131722',
                font: { color: '#d1d4dc', family: 'Inter, sans-serif', size: 12 },
                showlegend: false,
                xaxis: {
                    type: 'date',
                    range: [new Date(Date.now() - 60000), new Date()],  // Last 60 seconds
                    showgrid: true,
                    zeroline: false,
                    gridcolor: 'rgba(42, 46, 57, 0.8)',
                    gridwidth: 1,
                    tickformat: '%H:%M:%S',
                    tickfont: { family: 'Inter, sans-serif', size: 10, color: '#787b86' },
                    title: {
                        text: '',
                        font: { size: 12, color: '#787b86' }
                    },
                    rangeslider: { visible: false }
                },
                yaxis: {
                    showgrid: true,
                    zeroline: false,
                    gridcolor: 'rgba(42, 46, 57, 0.8)',
                    gridwidth: 1,
                    side: 'left',      // Changed from right to left
                    autorange: false,
                    range: [79500, 80500],  // Tighter range around 80k for BTC to show more movement
                    tickformat: ',.0f',
                    tickfont: { family: 'Inter, sans-serif', size: 10, color: '#787b86' },
                    title: {
                        text: '',
                        font: { size: 12, color: '#787b86' }
                    }
                },
                margin: { l: 50, r: 5, t: 30, b: 30 },  // Adjusted margins for left y-axis
                autosize: true,
                hovermode: 'x unified',
                hoverlabel: {
                    bgcolor: '#2a2e39',
                    bordercolor: '#2a2e39',
                    font: { family: 'Inter, sans-serif', color: '#d1d4dc' }
                }
            };
            
            // Equity Chart
            const equityLayout = {
                paper_bgcolor: '#131722',
                plot_bgcolor: '#131722',
                font: { color: '#d1d4dc', family: 'Inter, sans-serif', size: 12 },
                showlegend: false,
                xaxis: {
                    type: 'date',
                    range: [new Date(Date.now() - 60000), new Date()],  // Last 60 seconds
                    showgrid: true,
                    zeroline: false,
                    gridcolor: 'rgba(42, 46, 57, 0.8)',
                    gridwidth: 1,
                    tickformat: '%H:%M:%S',
                    tickfont: { family: 'Inter, sans-serif', size: 10, color: '#787b86' },
                    title: {
                        text: '',
                        font: { size: 12, color: '#787b86' }
                    },
                    rangeslider: { visible: false }
                },
                yaxis: {
                    showgrid: true,
                    zeroline: false,
                    gridcolor: 'rgba(42, 46, 57, 0.8)',
                    gridwidth: 1,
                    side: 'left',      // Changed from right to left
                    autorange: false,
                    range: [448000, 452000],  // Tighter range for equity to show more movement
                    tickformat: ',.0f',
                    tickfont: { family: 'Inter, sans-serif', size: 10, color: '#787b86' },
                    title: {
                        text: '',
                        font: { size: 12, color: '#787b86' }
                    }
                },
                margin: { l: 50, r: 5, t: 30, b: 30 },  // Adjusted margins for left y-axis
                autosize: true,
                hovermode: 'x unified',
                hoverlabel: {
                    bgcolor: '#2a2e39',
                    bordercolor: '#2a2e39',
                    font: { family: 'Inter, sans-serif', color: '#d1d4dc' }
                }
            };
            
            // Create initial empty charts
            Plotly.newPlot('btc-chart', [btcData], btcLayout);
            Plotly.newPlot('equity-chart', [equityData], equityLayout);
        }
        
        // Track last MT5 data update time
        let lastMT5Update = 0;
        
        // Store the latest MT5 data
        let latestEquity = 10000;
        let latestPosition = 'No Position';
        let latestPositionColor = '#9E9E9E';
        let latestApiStatus = 'CONNECTING...';
        
        // Function to fetch BTC price only (every 1 second)
        function fetchBTCPrice() {
            $.ajax({
                url: '/btc-price',
                type: 'GET',
                success: function(data) {
                    const now = new Date();
                    
                    // Update BTC price display
                    const priceDisplay = $('#btc-price-display');
                    const formattedPrice = '$' + data.btc_price.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                    
                    // Calculate price change
                    let priceChange = '';
                    let changeClass = '';
                    
                    if (lastBtcPrice !== null) {
                        const diff = data.btc_price - lastBtcPrice;
                        const sign = diff >= 0 ? '+' : '';
                        priceChange = `<span class="price-change ${diff >= 0 ? 'price-up' : 'price-down'}">${sign}$${Math.abs(diff).toFixed(2)}</span>`;
                    }
                    
                    priceDisplay.html(`BTC: ${formattedPrice} ${priceChange}`);
                    
                    // Add data point for BTC price
                    btcData.x.push(now);
                    btcData.y.push(data.btc_price);
                    
                    // Keep only the last 60 data points for performance
                    const MAX_POINTS = 60;
                    if (btcData.x.length > MAX_POINTS) {
                        btcData.x = btcData.x.slice(-MAX_POINTS);
                        btcData.y = btcData.y.slice(-MAX_POINTS);
                    }
                    
                    // Update x-axis range to show the last 60 seconds
                    const xrange = [new Date(now.getTime() - 60000), now];
                    // Add dynamic y-axis scaling for more dramatic chart movements
                    const lastPrice = data.btc_price;
                    const yrange = [lastPrice - 500, lastPrice + 500]; // +/- 500 from current price - narrower window
                    Plotly.relayout('btc-chart', {
                        'xaxis.range': xrange,
                        'yaxis.range': yrange
                    });
                    
                    // Update BTC chart
                    Plotly.extendTraces('btc-chart', {
                        x: [[now]],
                        y: [[data.btc_price]]
                    }, [0]);
                    
                    // Update last known price
                    lastBtcPrice = data.btc_price;
                },
                error: function(error) {
                    console.error('Error fetching BTC price:', error);
                }
            });
        }
        
        // Function to fetch MT5 data (every 3 seconds)
        function fetchMT5Data() {
            // Only fetch if it's been at least 3 seconds since the last update
            const now = new Date().getTime();
            if (now - lastMT5Update < 3000) {
                setTimeout(fetchMT5Data, 3000 - (now - lastMT5Update));
                return;
            }
            
            lastMT5Update = now;
            setTimeout(fetchMT5Data, 3000);
            
            $.ajax({
                url: '/mt5-data',
                type: 'GET',
                success: function(data) {
                    const now = new Date();
                    
                    // Update equity display
                    const equityDisplay = $('#equity-display');
                    const formattedEquity = '$' + data.equity.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});
                    
                    // Calculate equity change
                    let equityChange = '';
                    if (lastEquity !== null) {
                        const diff = data.equity - lastEquity;
                        const sign = diff >= 0 ? '+' : '';
                        equityChange = `<span class="price-change ${diff >= 0 ? 'price-up' : 'price-down'}">${sign}$${Math.abs(diff).toFixed(2)}</span>`;
                    }
                    
                    equityDisplay.html(`Equity: ${formattedEquity} ${equityChange}`);
                    
                    // Update last known equity
                    lastEquity = data.equity;
                    
                    // Add data point for equity
                    equityData.x.push(now);
                    equityData.y.push(data.equity);
                    
                    // Keep only the last 60 data points for performance
                    const MAX_POINTS = 60;
                    if (equityData.x.length > MAX_POINTS) {
                        equityData.x = equityData.x.slice(-MAX_POINTS);
                        equityData.y = equityData.y.slice(-MAX_POINTS);
                    }
                    
                    // Update x-axis range for equity chart
                    const xrange = [new Date(now.getTime() - 60000), now];
                    // Add dynamic y-axis scaling for more dramatic chart movements
                    const lastEquity = data.equity;
                    const yrange = [lastEquity - 2000, lastEquity + 2000]; // +/- 2000 from current equity - narrower window
                    Plotly.relayout('equity-chart', {
                        'xaxis.range': xrange,
                        'yaxis.range': yrange
                    });
                    
                    // Update equity chart
                    Plotly.extendTraces('equity-chart', {
                        x: [[now]],
                        y: [[data.equity]]
                    }, [0]);
                    
                    // Update position indicator
                    updatePositionIndicator(data.position);
                    
                    // Update status message
                    $('#status-message').html('MT5 data updated: ' + now.toLocaleTimeString());
                    
                    console.log('MT5 data updated:', { 
                        time: now.toLocaleTimeString(),
                        equity: data.equity,
                        position: data.position,
                        api_status: data.api_status
                    });
                },
                error: function(error) {
                    console.error('Error fetching MT5 data:', error);
                    $('#status-message').html('Error updating MT5 data. Will try again soon.');
                }
            });
        }
        
        // Function to update position indicator with proper styling
        function updatePositionIndicator(position) {
            const indicator = $('#position-indicator');
            indicator.removeClass('green red neutral');
            
            if (position === 'Buy') {
                indicator.addClass('green');
                indicator.html('<span class="position-icon">⬆</span> Long Position (Buy)');
            } else if (position === 'Sell') {
                indicator.addClass('red');
                indicator.html('<span class="position-icon">⬇</span> Short Position (Sell)');
            } else {
                indicator.addClass('neutral');
                indicator.text('No Active Position');
            }
        }
        
        // Initialize and start data updates
        $(document).ready(function() {
            // Initialize charts
            initCharts();
            
            // Update position indicator for initial state
            updatePositionIndicator('{{ btc_position }}');
            
            // Set initial MT5 update time
            lastMT5Update = new Date().getTime();
            
            // Fetch MT5 data immediately
            fetchMT5Data();
            
            // Fetch BTC price immediately
            fetchBTCPrice();
            
            // Set up intervals for updates:
            // BTC price updates every 1 second
            setInterval(fetchBTCPrice, 1000);
            
            // Handle window resize for responsive charts
            $(window).resize(function() {
                Plotly.Plots.resize('btc-chart');
                Plotly.Plots.resize('equity-chart');
            });
        });
    </script>
</body>
</html>
